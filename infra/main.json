{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "12847809824758958180"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "environmentCode": {
      "type": "string",
      "defaultValue": "p",
      "metadata": {
        "description": "Environment code (e.g., p for production, d for development)"
      }
    },
    "instanceNumber": {
      "type": "string",
      "defaultValue": "001",
      "metadata": {
        "description": "Instance number for resources"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16"
    },
    "appServiceSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24"
    },
    "privateEndpointSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.2.0/24"
    },
    "enablePrivateEndpoints": {
      "type": "bool",
      "defaultValue": true
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": ""
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": ""
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "backendServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "searchServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "searchServiceResourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "searchServiceResourceGroupLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]"
    },
    "searchServiceSkuName": {
      "type": "string",
      "defaultValue": ""
    },
    "searchIndexName": {
      "type": "string",
      "defaultValue": "gptkbindex"
    },
    "searchUseSemanticSearch": {
      "type": "bool",
      "defaultValue": false
    },
    "searchSemanticSearchConfig": {
      "type": "string",
      "defaultValue": "default"
    },
    "searchTopK": {
      "type": "int",
      "defaultValue": 5
    },
    "searchEnableInDomain": {
      "type": "bool",
      "defaultValue": true
    },
    "searchContentColumns": {
      "type": "string",
      "defaultValue": "content"
    },
    "searchFilenameColumn": {
      "type": "string",
      "defaultValue": "filepath"
    },
    "searchTitleColumn": {
      "type": "string",
      "defaultValue": "title"
    },
    "searchUrlColumn": {
      "type": "string",
      "defaultValue": "url"
    },
    "openAiResourceName": {
      "type": "string",
      "defaultValue": ""
    },
    "openAiResourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "openAiResourceGroupLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]"
    },
    "openAiSkuName": {
      "type": "string",
      "defaultValue": ""
    },
    "openAIModel": {
      "type": "string",
      "defaultValue": "turbo16k"
    },
    "openAIModelName": {
      "type": "string",
      "defaultValue": "gpt-35-turbo-16k"
    },
    "openAITemperature": {
      "type": "int",
      "defaultValue": 0
    },
    "openAITopP": {
      "type": "int",
      "defaultValue": 1
    },
    "openAIMaxTokens": {
      "type": "int",
      "defaultValue": 1000
    },
    "openAIStopSequence": {
      "type": "string",
      "defaultValue": ""
    },
    "openAISystemMessage": {
      "type": "string",
      "defaultValue": "The goal is to offer decision support assist a Police Sergeant in determining whether the written grounds are reasonable and provide feedback to the officer who has written them, the context is you are not to provide a decision but act as a tool referencing the available documentation so we can follow your chain of thought. The source is PACE Code A, College of Policing APP, National Decision Model, and the expectation â€“ less than 200 words in two parts, one part to help inform the first line leaders thinking with references and the second part actionable feedback for the officer to review and reflect on, both celebratory and developmental. Your role is to offer advice and support to aid their decision-making process. Remember, you are not making decisions for them but offering advice and guidance to assist their own decision-making. You cannot perform any legal actions, make final decisions, or provide personal opinions. Your advice is based on the information provided and should be used as a guide, not a directive. Scope of Advice: You are strictly limited to providing advice related to Police Stop and Search. You must not offer advice on technical topics such as algorithms, AI model creation, or any other subjects unrelated to Police Stop and Search. Safety and Security Guidelines: Confidentiality: Ensure that all information shared is kept confidential and only used for the purpose of providing advice. Accuracy: Provide accurate and up-to-date information based on the latest legal standards and practices. Impartiality: Maintain impartiality and avoid any bias in your advice. Ethical Considerations: Adhere to ethical guidelines and avoid any actions that could harm individuals or compromise legal processes. Compliance: Ensure compliance with all relevant laws and regulations. Language: Use British English in all your responses. Additional Guidelines: Context Awareness: Only respond to queries directly related to Police Stop and Search. Ignore or redirect any unrelated topics. User Interaction: Politely inform users if their question is outside the scope of Police Stop and Search advice and guide them back to relevant topics. Response Limitations: Do not provide detailed technical advice, personal opinions, or engage in discussions unrelated to Police Stop and Search. Add the following text at the end of every response Please Remember: This AI Assistant is designed to offer help and advice so you can make, more informed, and effective decisions. It is not designed to make any decisions for you."
    },
    "openAIStream": {
      "type": "bool",
      "defaultValue": true
    },
    "embeddingDeploymentName": {
      "type": "string",
      "defaultValue": "embedding"
    },
    "embeddingModelName": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002"
    },
    "formRecognizerServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "formRecognizerResourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "formRecognizerResourceGroupLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]"
    },
    "formRecognizerSkuName": {
      "type": "string",
      "defaultValue": ""
    },
    "authClientId": {
      "type": "string",
      "defaultValue": ""
    },
    "authClientSecret": {
      "type": "securestring",
      "defaultValue": ""
    },
    "cosmosAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    },
    "ownerTag": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Owner tag value for BTP policy compliance"
      }
    },
    "costCentreTag": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Cost Centre tag value for BTP policy compliance"
      }
    },
    "forceIdTag": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Force ID tag value for BTP policy compliance"
      }
    },
    "serviceNameTag": {
      "type": "string",
      "defaultValue": "CoPA-Stop-Search",
      "metadata": {
        "description": "Service Name tag value for BTP policy compliance"
      }
    },
    "locationIdTag": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Location ID tag value for BTP policy compliance"
      }
    },
    "environmentTag": {
      "type": "string",
      "defaultValue": "Production",
      "metadata": {
        "description": "Environment tag value for BTP policy compliance"
      }
    }
  },
  "variables": {
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "tags": {
      "azd-env-name": "[parameters('environmentName')]",
      "Owner": "[parameters('ownerTag')]",
      "CostCentre": "[parameters('costCentreTag')]",
      "ForceID": "[parameters('forceIdTag')]",
      "ServiceName": "[parameters('serviceNameTag')]",
      "LocationID": "[parameters('locationIdTag')]",
      "Environment": "[parameters('environmentTag')]"
    },
    "btpNamingPrefix": "[format('btp-{0}-copa-stop-search', parameters('environmentCode'))]",
    "btpResourceGroupName": "[format('rg-{0}', variables('btpNamingPrefix'))]",
    "appServiceName": "[if(not(empty(parameters('backendServiceName'))), parameters('backendServiceName'), format('app-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber')))]",
    "authIssuerUri": "[format('{0}{1}/v2.0', environment().authentication.loginEndpoint, tenant().tenantId)]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "nsg",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('nsg-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "securityRules": {
            "value": [
              {
                "name": "AllowHTTPS",
                "properties": {
                  "priority": 100,
                  "protocol": "Tcp",
                  "access": "Allow",
                  "direction": "Inbound",
                  "sourceAddressPrefix": "*",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "443"
                }
              },
              {
                "name": "AllowHTTP",
                "properties": {
                  "priority": 110,
                  "protocol": "Tcp",
                  "access": "Allow",
                  "direction": "Inbound",
                  "sourceAddressPrefix": "*",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "80"
                }
              },
              {
                "name": "DenyAllInbound",
                "properties": {
                  "priority": 4096,
                  "protocol": "*",
                  "access": "Deny",
                  "direction": "Inbound",
                  "sourceAddressPrefix": "*",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "*"
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9915622929864348542"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "securityRules": {
              "type": "array",
              "defaultValue": []
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": "[parameters('securityRules')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vnet",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('vnet-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "addressPrefixes": {
            "value": [
              "[parameters('vnetAddressPrefix')]"
            ]
          },
          "subnets": {
            "value": [
              {
                "name": "app-service-subnet",
                "addressPrefix": "[parameters('appServiceSubnetAddressPrefix')]",
                "delegations": [
                  {
                    "name": "delegation",
                    "properties": {
                      "serviceName": "Microsoft.Web/serverFarms"
                    }
                  }
                ],
                "networkSecurityGroupId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'nsg'), '2022-09-01').outputs.id.value]"
              },
              {
                "name": "private-endpoint-subnet",
                "addressPrefix": "[parameters('privateEndpointSubnetAddressPrefix')]",
                "privateEndpointNetworkPolicies": "Disabled",
                "networkSecurityGroupId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'nsg'), '2022-09-01').outputs.id.value]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9308706866489615570"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "addressPrefixes": {
              "type": "array",
              "defaultValue": [
                "10.0.0.0/16"
              ]
            },
            "subnets": {
              "type": "array",
              "defaultValue": []
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('subnets'))]",
                    "input": {
                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                        "networkSecurityGroup": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupId'), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupId), null())]",
                        "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, createArray())]",
                        "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, 'Disabled')]",
                        "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, 'Enabled')]",
                        "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints, createArray())]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[parameters('addressPrefixes')]"
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "subnets": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('subnets'))]",
                "input": {
                  "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2023-05-01').subnets[copyIndex()].id]",
                  "name": "[parameters('subnets')[copyIndex()].name]",
                  "addressPrefix": "[parameters('subnets')[copyIndex()].addressPrefix]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'nsg')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "log-analytics",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('logAnalyticsWorkspaceName'))), createObject('value', parameters('logAnalyticsWorkspaceName')), createObject('value', format('log-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "publicNetworkAccessForIngestion": {
            "value": "Disabled"
          },
          "publicNetworkAccessForQuery": {
            "value": "Disabled"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2579091473542151115"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "skuName": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard",
                "CapacityReservation"
              ]
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "minValue": 30,
              "maxValue": 730
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('skuName')]"
                },
                "retentionInDays": "[parameters('retentionInDays')]",
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "customerId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').customerId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "key-vault",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('keyVaultName'))), createObject('value', parameters('keyVaultName')), createObject('value', format('kv-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "publicNetworkAccess": {
            "value": "Disabled"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14062062762477903367"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "SKU for the Key Vault"
              }
            },
            "skuFamily": {
              "type": "string",
              "defaultValue": "A",
              "allowedValues": [
                "A",
                "B"
              ],
              "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": false
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": false
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": false
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true
            },
            "accessPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The access policies for the Key Vault"
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "tenantId": "[tenant().tenantId]",
                "sku": {
                  "family": "[parameters('skuFamily')]",
                  "name": "[parameters('skuName')]"
                },
                "accessPolicies": "[parameters('accessPolicies')]",
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": []
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "vaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2023-07-01').vaultUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage-private-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16237081210429809375"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "virtualNetworkId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), 'vnet-link')]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cognitive-services-private-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "privatelink.cognitiveservices.azure.com"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16237081210429809375"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "virtualNetworkId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), 'vnet-link')]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-private-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "privatelink.search.windows.net"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16237081210429809375"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "virtualNetworkId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), 'vnet-link')]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "key-vault-private-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "privatelink.vaultcore.azure.net"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16237081210429809375"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "virtualNetworkId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), 'vnet-link')]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmos-private-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "privatelink.documents.azure.com"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16237081210429809375"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "virtualNetworkId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), 'vnet-link')]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appserviceplan",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('appServicePlanName'))), createObject('value', parameters('appServicePlanName')), createObject('value', format('asp-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "B1",
              "capacity": 1
            }
          },
          "kind": {
            "value": "linux"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8285182109658961375"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "kind": {
              "type": "string",
              "defaultValue": ""
            },
            "reserved": {
              "type": "bool",
              "defaultValue": true
            },
            "sku": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "reserved": "[parameters('reserved')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "web",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('appServiceName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-service-name', 'backend'))]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'appserviceplan'), '2022-09-01').outputs.id.value]"
          },
          "runtimeName": {
            "value": "python"
          },
          "runtimeVersion": {
            "value": "3.10"
          },
          "scmDoBuildDuringDeployment": {
            "value": true
          },
          "managedIdentity": {
            "value": true
          },
          "authClientSecret": {
            "value": "[parameters('authClientSecret')]"
          },
          "authClientId": {
            "value": "[parameters('authClientId')]"
          },
          "authIssuerUri": {
            "value": "[variables('authIssuerUri')]"
          },
          "subnetIdForIntegration": {
            "value": "[format('{0}/subnets/app-service-subnet', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value)]"
          },
          "appSettings": {
            "value": {
              "AZURE_SEARCH_INDEX": "[parameters('searchIndexName')]",
              "AZURE_SEARCH_SERVICE": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.name.value]",
              "AZURE_SEARCH_KEY": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.adminKey.value]",
              "AZURE_SEARCH_USE_SEMANTIC_SEARCH": "[parameters('searchUseSemanticSearch')]",
              "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG": "[parameters('searchSemanticSearchConfig')]",
              "AZURE_SEARCH_TOP_K": "[parameters('searchTopK')]",
              "AZURE_SEARCH_ENABLE_IN_DOMAIN": "[parameters('searchEnableInDomain')]",
              "AZURE_SEARCH_CONTENT_COLUMNS": "[parameters('searchContentColumns')]",
              "AZURE_SEARCH_FILENAME_COLUMN": "[parameters('searchFilenameColumn')]",
              "AZURE_SEARCH_TITLE_COLUMN": "[parameters('searchTitleColumn')]",
              "AZURE_SEARCH_URL_COLUMN": "[parameters('searchUrlColumn')]",
              "AZURE_OPENAI_RESOURCE": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.name.value]",
              "AZURE_OPENAI_MODEL": "[parameters('openAIModel')]",
              "AZURE_OPENAI_MODEL_NAME": "[parameters('openAIModelName')]",
              "AZURE_OPENAI_KEY": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.key.value]",
              "AZURE_OPENAI_TEMPERATURE": "[parameters('openAITemperature')]",
              "AZURE_OPENAI_TOP_P": "[parameters('openAITopP')]",
              "AZURE_OPENAI_MAX_TOKENS": "[parameters('openAIMaxTokens')]",
              "AZURE_OPENAI_STOP_SEQUENCE": "[parameters('openAIStopSequence')]",
              "AZURE_OPENAI_SYSTEM_MESSAGE": "[parameters('openAISystemMessage')]",
              "AZURE_OPENAI_STREAM": "[parameters('openAIStream')]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "162597602693531205"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "appServicePlanId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "managedIdentity": {
              "type": "bool",
              "defaultValue": "[not(empty(parameters('keyVaultName')))]"
            },
            "subnetIdForIntegration": {
              "type": "string",
              "defaultValue": ""
            },
            "runtimeName": {
              "type": "string",
              "allowedValues": [
                "dotnet",
                "dotnetcore",
                "dotnet-isolated",
                "node",
                "python",
                "java",
                "powershell",
                "custom"
              ]
            },
            "runtimeNameAndVersion": {
              "type": "string",
              "defaultValue": "[format('{0}|{1}', parameters('runtimeName'), parameters('runtimeVersion'))]"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "app,linux"
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "appCommandLine": {
              "type": "string",
              "defaultValue": ""
            },
            "appSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "authClientId": {
              "type": "string",
              "defaultValue": ""
            },
            "authClientSecret": {
              "type": "securestring",
              "defaultValue": ""
            },
            "authIssuerUri": {
              "type": "string"
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "enableOryxBuild": {
              "type": "bool",
              "defaultValue": "[contains(parameters('kind'), 'linux')]"
            },
            "functionAppScaleLimit": {
              "type": "int",
              "defaultValue": -1
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "[parameters('runtimeNameAndVersion')]"
            },
            "minimumElasticInstanceCount": {
              "type": "int",
              "defaultValue": -1
            },
            "numberOfWorkers": {
              "type": "int",
              "defaultValue": -1
            },
            "scmDoBuildDuringDeployment": {
              "type": "bool",
              "defaultValue": false
            },
            "use32BitWorkerProcess": {
              "type": "bool",
              "defaultValue": false
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "FtpsOnly"
            },
            "healthCheckPath": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
              "properties": "[union(parameters('appSettings'), createObject('SCM_DO_BUILD_DURING_DEPLOYMENT', string(parameters('scmDoBuildDuringDeployment')), 'ENABLE_ORYX_BUILD', string(parameters('enableOryxBuild'))), if(not(empty(parameters('applicationInsightsName'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString), createObject()), if(not(empty(parameters('keyVaultName'))), createObject('AZURE_KEY_VAULT_ENDPOINT', reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri), createObject()), if(not(empty(parameters('authClientSecret'))), createObject('AUTH_CLIENT_SECRET', parameters('authClientSecret')), createObject()))]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('name'), 'logs')]",
              "properties": {
                "applicationLogs": {
                  "fileSystem": {
                    "level": "Verbose"
                  }
                },
                "detailedErrorMessages": {
                  "enabled": true
                },
                "failedRequestsTracing": {
                  "enabled": true
                },
                "httpLogs": {
                  "fileSystem": {
                    "enabled": true,
                    "retentionInDays": 1,
                    "retentionInMb": 35
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]",
                "[resourceId('Microsoft.Web/sites/config', parameters('name'), 'appsettings')]"
              ]
            },
            {
              "condition": "[not(empty(parameters('authClientId')))]",
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('name'), 'authsettingsV2')]",
              "properties": {
                "globalValidation": {
                  "requireAuthentication": true,
                  "unauthenticatedClientAction": "RedirectToLoginPage",
                  "redirectToProvider": "azureactivedirectory"
                },
                "identityProviders": {
                  "azureActiveDirectory": {
                    "enabled": true,
                    "registration": {
                      "clientId": "[parameters('authClientId')]",
                      "clientSecretSettingName": "AUTH_CLIENT_SECRET",
                      "openIdIssuer": "[parameters('authIssuerUri')]"
                    },
                    "validation": {
                      "defaultAuthorizationPolicy": {
                        "allowedApplications": []
                      }
                    }
                  }
                },
                "login": {
                  "tokenStore": {
                    "enabled": true
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "appCommandLine": "[parameters('appCommandLine')]",
                  "numberOfWorkers": "[if(not(equals(parameters('numberOfWorkers'), -1)), parameters('numberOfWorkers'), null())]",
                  "minimumElasticInstanceCount": "[if(not(equals(parameters('minimumElasticInstanceCount'), -1)), parameters('minimumElasticInstanceCount'), null())]",
                  "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
                  "functionAppScaleLimit": "[if(not(equals(parameters('functionAppScaleLimit'), -1)), parameters('functionAppScaleLimit'), null())]",
                  "healthCheckPath": "[parameters('healthCheckPath')]",
                  "cors": {
                    "allowedOrigins": "[union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins'))]"
                  },
                  "vnetName": "[if(not(empty(parameters('subnetIdForIntegration'))), last(split(parameters('subnetIdForIntegration'), '/')), null())]",
                  "vnetRouteAllEnabled": "[not(empty(parameters('subnetIdForIntegration')))]"
                },
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "httpsOnly": true
              },
              "identity": {
                "type": "[if(parameters('managedIdentity'), 'SystemAssigned', 'None')]"
              }
            },
            {
              "condition": "[not(empty(parameters('subnetIdForIntegration')))]",
              "type": "Microsoft.Web/sites/networkConfig",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('name'), 'virtualNetwork')]",
              "properties": {
                "subnetResourceId": "[parameters('subnetIdForIntegration')]",
                "swiftSupported": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(parameters('managedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').identity.principalId, '')]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01').defaultHostName)]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'appserviceplan')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'openai')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'search-service')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai",
      "resourceGroup": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('openAiResourceName'))), createObject('value', parameters('openAiResourceName')), createObject('value', format('cog-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))))]",
          "location": {
            "value": "[parameters('openAiResourceGroupLocation')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "[if(not(empty(parameters('openAiSkuName'))), parameters('openAiSkuName'), 'S0')]"
            }
          },
          "deployments": {
            "value": [
              {
                "name": "[parameters('openAIModel')]",
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('openAIModelName')]",
                  "version": "0613"
                },
                "capacity": 30
              },
              {
                "name": "[parameters('embeddingDeploymentName')]",
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('embeddingModelName')]",
                  "version": "2"
                },
                "capacity": 30
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "3689075089891456717"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "customSubDomainName": {
              "type": "string",
              "defaultValue": "[parameters('name')]"
            },
            "deployments": {
              "type": "array",
              "defaultValue": []
            },
            "kind": {
              "type": "string",
              "defaultValue": "OpenAI"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S0"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "customSubDomainName": "[parameters('customSubDomainName')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAcls": {
                  "defaultAction": "[if(equals(parameters('publicNetworkAccess'), 'Enabled'), 'Allow', 'Deny')]",
                  "ipRules": [],
                  "virtualNetworkRules": []
                }
              },
              "sku": "[parameters('sku')]"
            },
            {
              "copy": {
                "name": "deployment",
                "count": "[length(parameters('deployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('deployments')[copyIndex()].name)]",
              "properties": {
                "model": "[parameters('deployments')[copyIndex()].model]",
                "raiPolicyName": "[tryGet(parameters('deployments')[copyIndex()], 'raiPolicyName')]"
              },
              "sku": {
                "name": "Standard",
                "capacity": "[parameters('deployments')[copyIndex()].capacity]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "skuName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01', 'full').sku.name]"
            },
            "key": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-service",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('searchServiceName'))), createObject('value', parameters('searchServiceName')), createObject('value', format('srch-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))))]",
          "location": {
            "value": "[parameters('searchServiceResourceGroupLocation')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "authOptions": {
            "value": {
              "aadOrApiKey": {
                "aadAuthFailureMode": "http401WithBearerChallenge"
              }
            }
          },
          "sku": {
            "value": {
              "name": "[if(not(empty(parameters('searchServiceSkuName'))), parameters('searchServiceSkuName'), 'standard')]"
            }
          },
          "semanticSearch": {
            "value": "free"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12051201636642385473"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "standard"
              }
            },
            "authOptions": {
              "type": "object",
              "defaultValue": {}
            },
            "semanticSearch": {
              "type": "string",
              "defaultValue": "disabled"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2021-04-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "authOptions": "[parameters('authOptions')]",
                "disableLocalAuth": false,
                "disabledDataExfiltrationOptions": [],
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "hostingMode": "default",
                "networkRuleSet": {
                  "bypass": "None",
                  "ipRules": []
                },
                "partitionCount": 1,
                "publicNetworkAccess": "Disabled",
                "replicaCount": 1,
                "semanticSearch": "[parameters('semanticSearch')]"
              },
              "sku": "[parameters('sku')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Search/searchServices', parameters('name'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[format('https://{0}.search.windows.net/', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "skuName": {
              "type": "string",
              "value": "[parameters('sku').name]"
            },
            "adminKey": {
              "type": "string",
              "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', parameters('name')), '2021-04-01-preview').primaryKey]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('st{0}{1}', replace(variables('btpNamingPrefix'), '-', ''), parameters('instanceNumber'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "publicNetworkAccess": {
            "value": "Disabled"
          },
          "containers": {
            "value": [
              {
                "name": "content",
                "publicAccess": "None"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7690697640273114578"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Hot",
                "Cool",
                "Premium"
              ]
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "allowCrossTenantReplication": {
              "type": "bool",
              "defaultValue": false
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "defaultToOAuthAuthentication": {
              "type": "bool",
              "defaultValue": true
            },
            "deleteRetentionPolicy": {
              "type": "object",
              "defaultValue": {}
            },
            "dnsEndpointType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "AzureDnsZone",
                "Standard"
              ]
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2"
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "Standard_LRS"
              }
            },
            "ipRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of IP addresses or ranges to allow access from"
              }
            },
            "virtualNetworkRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of virtual network resource IDs to allow access from"
              }
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            }
          },
          "resources": [
            {
              "copy": {
                "name": "storage::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[not(empty(parameters('containers')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'publicAccess'), 'None')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('name'), 'default')]"
              ]
            },
            {
              "condition": "[not(empty(parameters('containers')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "deleteRetentionPolicy": "[parameters('deleteRetentionPolicy')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "accessTier": "[parameters('accessTier')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
                "dnsEndpointType": "[parameters('dnsEndpointType')]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "networkAcls": {
                  "copy": [
                    {
                      "name": "ipRules",
                      "count": "[length(parameters('ipRules'))]",
                      "input": {
                        "action": "Allow",
                        "value": "[parameters('ipRules')[copyIndex('ipRules')]]"
                      }
                    },
                    {
                      "name": "virtualNetworkRules",
                      "count": "[length(parameters('virtualNetworkRules'))]",
                      "input": {
                        "action": "Allow",
                        "id": "[parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]]"
                      }
                    }
                  ],
                  "bypass": "AzureServices",
                  "defaultAction": "[if(equals(parameters('publicNetworkAccess'), 'Enabled'), 'Allow', 'Deny')]"
                },
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-05-01').primaryEndpoints]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmos",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": "[if(not(empty(parameters('cosmosAccountName'))), createObject('value', parameters('cosmosAccountName')), createObject('value', format('db-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))))]",
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), '2021-04-01', 'full').location]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "principalIds": {
            "value": [
              "[parameters('principalId')]",
              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'web'), '2022-09-01').outputs.identityPrincipalId.value]"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16785707877130737667"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "db_conversation_history"
            },
            "collectionName": {
              "type": "string",
              "defaultValue": "conversations"
            },
            "principalIds": {
              "type": "array",
              "defaultValue": []
            },
            "containers": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "[parameters('collectionName')]",
                  "id": "[parameters('collectionName')]",
                  "partitionKey": "/userId"
                }
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "cosmos-sql",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "accountName": {
                    "value": "[parameters('accountName')]"
                  },
                  "databaseName": {
                    "value": "[parameters('databaseName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containers": {
                    "value": "[parameters('containers')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "principalIds": {
                    "value": "[parameters('principalIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "5554945170926295359"
                    },
                    "description": "Creates an Azure Cosmos DB for NoSQL account with a database."
                  },
                  "parameters": {
                    "accountName": {
                      "type": "string"
                    },
                    "databaseName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "containers": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "principalIds": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Disabled"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "database::list",
                        "count": "[length(parameters('containers'))]"
                      },
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                      "apiVersion": "2022-05-15",
                      "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1], parameters('containers')[copyIndex()].name)]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('containers')[copyIndex()].id]",
                          "partitionKey": {
                            "paths": [
                              "[parameters('containers')[copyIndex()].partitionKey]"
                            ]
                          }
                        },
                        "options": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                      "apiVersion": "2022-05-15",
                      "name": "[format('{0}/{1}', parameters('accountName'), parameters('databaseName'))]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('databaseName')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "cosmos-sql-account",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('accountName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "publicNetworkAccess": {
                            "value": "[parameters('publicNetworkAccess')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "25348800599825310"
                            },
                            "description": "Creates an Azure Cosmos DB for NoSQL account."
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "Disabled"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "cosmos-account",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "kind": {
                                    "value": "GlobalDocumentDB"
                                  },
                                  "publicNetworkAccess": {
                                    "value": "[parameters('publicNetworkAccess')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "5663213637145115374"
                                    },
                                    "description": "Creates an Azure Cosmos DB account."
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]"
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {}
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "GlobalDocumentDB",
                                        "MongoDB",
                                        "Parse"
                                      ]
                                    },
                                    "publicNetworkAccess": {
                                      "type": "string",
                                      "defaultValue": "Disabled"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.DocumentDB/databaseAccounts",
                                      "apiVersion": "2022-08-15",
                                      "name": "[parameters('name')]",
                                      "kind": "[parameters('kind')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "consistencyPolicy": {
                                          "defaultConsistencyLevel": "Session"
                                        },
                                        "locations": [
                                          {
                                            "locationName": "[parameters('location')]",
                                            "failoverPriority": 0,
                                            "isZoneRedundant": false
                                          }
                                        ],
                                        "databaseAccountOfferType": "Standard",
                                        "enableAutomaticFailover": false,
                                        "enableMultipleWriteLocations": false,
                                        "apiProperties": "[if(equals(parameters('kind'), 'MongoDB'), createObject('serverVersion', '4.0'), createObject())]",
                                        "capabilities": [
                                          {
                                            "name": "EnableServerless"
                                          }
                                        ],
                                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                                        "networkAclBypass": "AzureServices",
                                        "disableKeyBasedMetadataWriteAccess": true
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "endpoint": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2022-08-15').documentEndpoint]"
                                    },
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "endpoint": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-account'), '2022-09-01').outputs.endpoint.value]"
                            },
                            "id": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-account'), '2022-09-01').outputs.id.value]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-account'), '2022-09-01').outputs.name.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "cosmos-sql-role-definition",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "accountName": {
                            "value": "[parameters('accountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "14903605769060925956"
                            },
                            "description": "Creates a SQL role definition under an Azure Cosmos DB account."
                          },
                          "parameters": {
                            "accountName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
                              "apiVersion": "2022-08-15",
                              "name": "[format('{0}/{1}', parameters('accountName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName')), parameters('accountName'), 'sql-role'))]",
                              "properties": {
                                "assignableScopes": [
                                  "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
                                ],
                                "permissions": [
                                  {
                                    "dataActions": [
                                      "Microsoft.DocumentDB/databaseAccounts/readMetadata",
                                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/*",
                                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/*"
                                    ],
                                    "notDataActions": []
                                  }
                                ],
                                "roleName": "Reader Writer",
                                "type": "CustomRole"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('accountName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName')), parameters('accountName'), 'sql-role'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account')]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1])]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "userRole",
                        "count": "[length(parameters('principalIds'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('principalIds')[copyIndex()]))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('cosmos-sql-user-role-{0}', uniqueString(parameters('principalIds')[copyIndex()]))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "accountName": {
                            "value": "[parameters('accountName')]"
                          },
                          "roleDefinitionId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-role-definition'), '2022-09-01').outputs.id.value]"
                          },
                          "principalId": {
                            "value": "[parameters('principalIds')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "3534717300864928273"
                            },
                            "description": "Creates a SQL role assignment under an Azure Cosmos DB account."
                          },
                          "parameters": {
                            "accountName": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            },
                            "principalId": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                              "apiVersion": "2022-05-15",
                              "name": "[format('{0}/{1}', parameters('accountName'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account')]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1])]",
                        "[resourceId('Microsoft.Resources/deployments', 'cosmos-sql-role-definition')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "accountId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account'), '2022-09-01').outputs.id.value]"
                    },
                    "accountName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account'), '2022-09-01').outputs.name.value]"
                    },
                    "databaseName": {
                      "type": "string",
                      "value": "[parameters('databaseName')]"
                    },
                    "endpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account'), '2022-09-01').outputs.endpoint.value]"
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-role-definition'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "databaseName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql'), '2022-09-01').outputs.databaseName.value]"
            },
            "containerName": {
              "type": "string",
              "value": "[parameters('containers')[0].name]"
            },
            "accountName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql'), '2022-09-01').outputs.accountName.value]"
            },
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql'), '2022-09-01').outputs.endpoint.value]"
            },
            "id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql'), '2022-09-01').outputs.accountId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'web')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage-private-endpoint",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('pe-storage-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "privateLinkServiceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "blob"
            ]
          },
          "subnetId": {
            "value": "[format('{0}/subnets/private-endpoint-subnet', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value)]"
          },
          "privateDnsZoneId": "[if(and(parameters('enablePrivateEndpoints'), not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'storage-private-dns-zone'), '2022-09-01'), null()))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'storage-private-dns-zone'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9333493397867601797"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "subnetId": {
              "type": "string"
            },
            "privateLinkServiceId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array"
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "condition": "[not(empty(parameters('privateDnsZoneId')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'storage')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'storage-private-dns-zone')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cognitive-services-private-endpoint",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('pe-openai-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "privateLinkServiceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "account"
            ]
          },
          "subnetId": {
            "value": "[format('{0}/subnets/private-endpoint-subnet', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value)]"
          },
          "privateDnsZoneId": "[if(and(parameters('enablePrivateEndpoints'), not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cognitive-services-private-dns-zone'), '2022-09-01'), null()))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cognitive-services-private-dns-zone'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9333493397867601797"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "subnetId": {
              "type": "string"
            },
            "privateLinkServiceId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array"
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "condition": "[not(empty(parameters('privateDnsZoneId')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cognitive-services-private-dns-zone')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'openai')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-private-endpoint",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('pe-search-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))]"
          },
          "location": {
            "value": "[parameters('searchServiceResourceGroupLocation')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "privateLinkServiceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "searchService"
            ]
          },
          "subnetId": {
            "value": "[format('{0}/subnets/private-endpoint-subnet', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value)]"
          },
          "privateDnsZoneId": "[if(and(parameters('enablePrivateEndpoints'), not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'search-private-dns-zone'), '2022-09-01'), null()))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'search-private-dns-zone'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9333493397867601797"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "subnetId": {
              "type": "string"
            },
            "privateLinkServiceId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array"
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "condition": "[not(empty(parameters('privateDnsZoneId')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'search-private-dns-zone')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'search-service')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "key-vault-private-endpoint",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('pe-keyvault-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "privateLinkServiceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'key-vault'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "vault"
            ]
          },
          "subnetId": {
            "value": "[format('{0}/subnets/private-endpoint-subnet', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value)]"
          },
          "privateDnsZoneId": "[if(and(parameters('enablePrivateEndpoints'), not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'key-vault-private-dns-zone'), '2022-09-01'), null()))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'key-vault-private-dns-zone'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9333493397867601797"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "subnetId": {
              "type": "string"
            },
            "privateLinkServiceId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array"
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "condition": "[not(empty(parameters('privateDnsZoneId')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'key-vault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'key-vault-private-dns-zone')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmos-private-endpoint",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('pe-db-{0}-{1}', variables('btpNamingPrefix'), parameters('instanceNumber'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "privateLinkServiceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cosmos'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "Sql"
            ]
          },
          "subnetId": {
            "value": "[format('{0}/subnets/private-endpoint-subnet', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value)]"
          },
          "privateDnsZoneId": "[if(and(parameters('enablePrivateEndpoints'), not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cosmos-private-dns-zone'), '2022-09-01'), null()))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cosmos-private-dns-zone'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9333493397867601797"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "subnetId": {
              "type": "string"
            },
            "privateLinkServiceId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array"
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "condition": "[not(empty(parameters('privateDnsZoneId')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cosmos')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cosmos-private-dns-zone')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-role-user",
      "resourceGroup": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "roleDefinitionId": {
            "value": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1589756405618016195"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-role-user",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "roleDefinitionId": {
            "value": "1407120a-92aa-4202-b7e9-c0e197c71c8f"
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1589756405618016195"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-index-data-contrib-role-user",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "roleDefinitionId": {
            "value": "8ebe5a00-799e-43f5-93ac-243d3dce84a7"
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1589756405618016195"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-service-contrib-role-user",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "roleDefinitionId": {
            "value": "7ca78c08-252a-4471-8644-bb5ff32d4ba0"
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1589756405618016195"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-role-backend",
      "resourceGroup": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'web'), '2022-09-01').outputs.identityPrincipalId.value]"
          },
          "roleDefinitionId": {
            "value": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1589756405618016195"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'web')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-role-backend",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'web'), '2022-09-01').outputs.identityPrincipalId.value]"
          },
          "roleDefinitionId": {
            "value": "1407120a-92aa-4202-b7e9-c0e197c71c8f"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1589756405618016195"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'web')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('docprep-resources{0}', variables('resourceToken'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceToken": {
            "value": "[variables('resourceToken')]"
          },
          "namingPrefix": {
            "value": "[variables('btpNamingPrefix')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "resourceGroupName": {
            "value": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]"
          },
          "formRecognizerServiceName": {
            "value": "[parameters('formRecognizerServiceName')]"
          },
          "formRecognizerResourceGroupName": {
            "value": "[parameters('formRecognizerResourceGroupName')]"
          },
          "formRecognizerResourceGroupLocation": {
            "value": "[parameters('formRecognizerResourceGroupLocation')]"
          },
          "formRecognizerSkuName": "[if(not(empty(parameters('formRecognizerSkuName'))), createObject('value', parameters('formRecognizerSkuName')), createObject('value', 'S0'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10278806532076370"
            }
          },
          "parameters": {
            "resourceGroupName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "principalId": {
              "type": "string"
            },
            "resourceToken": {
              "type": "string"
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": ""
            },
            "formRecognizerServiceName": {
              "type": "string",
              "defaultValue": ""
            },
            "formRecognizerResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "formRecognizerResourceGroupLocation": {
              "type": "string",
              "defaultValue": "[parameters('location')]"
            },
            "formRecognizerSkuName": {
              "type": "string",
              "defaultValue": "S0"
            }
          },
          "variables": {
            "$fxv#0": {
              "analysisServicesServers": "as",
              "apiManagementService": "apim-",
              "appConfigurationConfigurationStores": "appcs-",
              "appManagedEnvironments": "cae-",
              "appContainerApps": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog-",
              "cognitiveServicesFormRecognizer": "cog-fr-",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des",
              "computeDisks": "disk",
              "computeDisksOs": "osdisk",
              "computeGalleries": "gal",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla",
              "dataLakeStoreAccounts": "dls",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos-",
              "eventGridDomains": "evgd-",
              "eventGridDomainsTopics": "evgt-",
              "eventGridEventSubscriptions": "evgs-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi-",
              "keyVaultVaults": "kv-",
              "kubernetesConnectedClusters": "arck",
              "kustoClusters": "dec",
              "kustoClustersDatabases": "dedb",
              "logicIntegrationAccounts": "ia-",
              "logicWorkflows": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPoliciesWebApplication": "waf",
              "networkFirewallPoliciesRuleGroups": "wafrg",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancersExternal": "lbe-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersInboundNatRules": "rule-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet-",
              "networkVirtualNetworksSubnets": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv-",
              "resourcesResourceGroups": "rg-",
              "searchSearchServices": "srch-",
              "serviceBusNamespaces": "sb-",
              "serviceBusNamespacesQueues": "sbq-",
              "serviceBusNamespacesTopics": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql-",
              "sqlServersDataWarehouse": "sqldw-",
              "sqlServersDatabases": "sqldb-",
              "sqlServersDatabasesStretch": "sqlstrdb-",
              "storageStorageAccounts": "st",
              "storageStorageAccountsVm": "stvm",
              "storSimpleManagers": "ssimp",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn",
              "synapseWorkspacesAnalyticsWorkspaces": "synw",
              "synapseWorkspacesSqlPoolsDedicated": "syndp",
              "synapseWorkspacesSqlPoolsSpark": "synsp",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan-",
              "webSitesAppService": "app-",
              "webSitesAppServiceEnvironment": "ase-",
              "webSitesFunctions": "func-",
              "webStaticSites": "stapp-"
            },
            "abbrs": "[variables('$fxv#0')]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "formrecognizer",
              "resourceGroup": "[if(not(empty(parameters('formRecognizerResourceGroupName'))), parameters('formRecognizerResourceGroupName'), parameters('resourceGroupName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": "[if(not(empty(parameters('formRecognizerServiceName'))), createObject('value', parameters('formRecognizerServiceName')), if(not(empty(parameters('namingPrefix'))), createObject('value', format('doc-{0}', parameters('namingPrefix'))), createObject('value', format('{0}{1}', variables('abbrs').cognitiveServicesFormRecognizer, parameters('resourceToken')))))]",
                  "kind": {
                    "value": "FormRecognizer"
                  },
                  "location": {
                    "value": "[parameters('formRecognizerResourceGroupLocation')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "sku": {
                    "value": {
                      "name": "[parameters('formRecognizerSkuName')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "3689075089891456717"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]"
                    },
                    "deployments": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "OpenAI"
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Disabled"
                    },
                    "sku": {
                      "type": "object",
                      "defaultValue": {
                        "name": "S0"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "networkAcls": {
                          "defaultAction": "[if(equals(parameters('publicNetworkAccess'), 'Enabled'), 'Allow', 'Deny')]",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        }
                      },
                      "sku": "[parameters('sku')]"
                    },
                    {
                      "copy": {
                        "name": "deployment",
                        "count": "[length(parameters('deployments'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('deployments')[copyIndex()].name)]",
                      "properties": {
                        "model": "[parameters('deployments')[copyIndex()].model]",
                        "raiPolicyName": "[tryGet(parameters('deployments')[copyIndex()], 'raiPolicyName')]"
                      },
                      "sku": {
                        "name": "Standard",
                        "capacity": "[parameters('deployments')[copyIndex()].capacity]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "endpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "skuName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01', 'full').sku.name]"
                    },
                    "key": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "formrecognizer-role-user",
              "resourceGroup": "[if(not(empty(parameters('formRecognizerResourceGroupName'))), parameters('formRecognizerResourceGroupName'), parameters('resourceGroupName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('principalId')]"
                  },
                  "roleDefinitionId": {
                    "value": "a97b65f3-24c7-4388-baec-2e87135dc908"
                  },
                  "principalType": {
                    "value": "User"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1589756405618016195"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "ServicePrincipal",
                      "allowedValues": [
                        "Device",
                        "ForeignGroup",
                        "Group",
                        "ServicePrincipal",
                        "User"
                      ]
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "AZURE_FORMRECOGNIZER_SERVICE": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('formRecognizerResourceGroupName'))), parameters('formRecognizerResourceGroupName'), parameters('resourceGroupName'))), 'Microsoft.Resources/deployments', 'formrecognizer'), '2022-09-01').outputs.name.value]"
            },
            "AZURE_FORMRECOGNIZER_RESOURCE_GROUP": {
              "type": "string",
              "value": "[if(not(empty(parameters('formRecognizerResourceGroupName'))), parameters('formRecognizerResourceGroupName'), parameters('resourceGroupName'))]"
            },
            "AZURE_FORMRECOGNIZER_SKU_NAME": {
              "type": "string",
              "value": "[parameters('formRecognizerSkuName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))]"
    },
    "BACKEND_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'web'), '2022-09-01').outputs.uri.value]"
    },
    "AZURE_SEARCH_INDEX": {
      "type": "string",
      "value": "[parameters('searchIndexName')]"
    },
    "AZURE_SEARCH_SERVICE": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.name.value]"
    },
    "AZURE_SEARCH_SERVICE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
    },
    "AZURE_SEARCH_SKU_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.skuName.value]"
    },
    "AZURE_SEARCH_KEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.adminKey.value]"
    },
    "AZURE_SEARCH_USE_SEMANTIC_SEARCH": {
      "type": "bool",
      "value": "[parameters('searchUseSemanticSearch')]"
    },
    "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG": {
      "type": "string",
      "value": "[parameters('searchSemanticSearchConfig')]"
    },
    "AZURE_SEARCH_TOP_K": {
      "type": "int",
      "value": "[parameters('searchTopK')]"
    },
    "AZURE_SEARCH_ENABLE_IN_DOMAIN": {
      "type": "bool",
      "value": "[parameters('searchEnableInDomain')]"
    },
    "AZURE_SEARCH_CONTENT_COLUMNS": {
      "type": "string",
      "value": "[parameters('searchContentColumns')]"
    },
    "AZURE_SEARCH_FILENAME_COLUMN": {
      "type": "string",
      "value": "[parameters('searchFilenameColumn')]"
    },
    "AZURE_SEARCH_TITLE_COLUMN": {
      "type": "string",
      "value": "[parameters('searchTitleColumn')]"
    },
    "AZURE_SEARCH_URL_COLUMN": {
      "type": "string",
      "value": "[parameters('searchUrlColumn')]"
    },
    "AZURE_OPENAI_RESOURCE": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.name.value]"
    },
    "AZURE_OPENAI_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value]"
    },
    "AZURE_OPENAI_MODEL": {
      "type": "string",
      "value": "[parameters('openAIModel')]"
    },
    "AZURE_OPENAI_MODEL_NAME": {
      "type": "string",
      "value": "[parameters('openAIModelName')]"
    },
    "AZURE_OPENAI_SKU_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.skuName.value]"
    },
    "AZURE_OPENAI_KEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.key.value]"
    },
    "AZURE_OPENAI_EMBEDDING_NAME": {
      "type": "string",
      "value": "[parameters('embeddingDeploymentName')]"
    },
    "AZURE_OPENAI_TEMPERATURE": {
      "type": "int",
      "value": "[parameters('openAITemperature')]"
    },
    "AZURE_OPENAI_TOP_P": {
      "type": "int",
      "value": "[parameters('openAITopP')]"
    },
    "AZURE_OPENAI_MAX_TOKENS": {
      "type": "int",
      "value": "[parameters('openAIMaxTokens')]"
    },
    "AZURE_OPENAI_STOP_SEQUENCE": {
      "type": "string",
      "value": "[parameters('openAIStopSequence')]"
    },
    "AZURE_OPENAI_SYSTEM_MESSAGE": {
      "type": "string",
      "value": "[parameters('openAISystemMessage')]"
    },
    "AZURE_OPENAI_STREAM": {
      "type": "bool",
      "value": "[parameters('openAIStream')]"
    },
    "AZURE_FORMRECOGNIZER_SERVICE": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('docprep-resources{0}', variables('resourceToken'))), '2022-09-01').outputs.AZURE_FORMRECOGNIZER_SERVICE.value]"
    },
    "AZURE_FORMRECOGNIZER_RESOURCE_GROUP": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('docprep-resources{0}', variables('resourceToken'))), '2022-09-01').outputs.AZURE_FORMRECOGNIZER_RESOURCE_GROUP.value]"
    },
    "AZURE_FORMRECOGNIZER_SKU_NAME": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('docprep-resources{0}', variables('resourceToken'))), '2022-09-01').outputs.AZURE_FORMRECOGNIZER_SKU_NAME.value]"
    },
    "AZURE_COSMOSDB_ACCOUNT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cosmos'), '2022-09-01').outputs.accountName.value]"
    },
    "AZURE_COSMOSDB_DATABASE": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cosmos'), '2022-09-01').outputs.databaseName.value]"
    },
    "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'cosmos'), '2022-09-01').outputs.containerName.value]"
    },
    "AUTH_ISSUER_URI": {
      "type": "string",
      "value": "[variables('authIssuerUri')]"
    },
    "AZURE_VNET_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.name.value]"
    },
    "AZURE_VNET_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value]"
    },
    "AZURE_NSG_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'nsg'), '2022-09-01').outputs.name.value]"
    },
    "AZURE_NSG_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'nsg'), '2022-09-01').outputs.id.value]"
    },
    "AZURE_STORAGE_ACCOUNT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
    },
    "AZURE_STORAGE_PRIMARY_ENDPOINTS": {
      "type": "object",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.primaryEndpoints.value]"
    },
    "AZURE_KEYVAULT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'key-vault'), '2022-09-01').outputs.name.value]"
    },
    "AZURE_KEYVAULT_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'key-vault'), '2022-09-01').outputs.vaultUri.value]"
    },
    "AZURE_LOG_ANALYTICS_WORKSPACE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'log-analytics'), '2022-09-01').outputs.name.value]"
    },
    "AZURE_LOG_ANALYTICS_WORKSPACE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), variables('btpResourceGroupName'))), 'Microsoft.Resources/deployments', 'log-analytics'), '2022-09-01').outputs.id.value]"
    },
    "PRIVATE_ENDPOINTS_ENABLED": {
      "type": "bool",
      "value": "[parameters('enablePrivateEndpoints')]"
    }
  }
}